@page "/login"

@using CateringApi.Helpers.Common.DTOs;
@using CateringApi.Helpers.Common.Requests;
@using Catering_WebAssembly.Services;

@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject IJSRuntime Js;

<div class="row">
	<div class="col-7 text-center">
		<h1 id="title"><b>Catering Service</b></h1>
		<h1>Choose and order food prepared from our chefs.</h1>
	</div>
	<div class="col-md-4 col-md-offset-2 text-center">
		<section>
			<EditForm Model="User" class="centered" OnValidSubmit="@HandleValidRequest">
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="User.Email"></InputText>
					<label class="form-label">Email</label>
				</div>
				<br />
				<div class="form-floating">
					<InputText class="form-control" @bind-Value="User.Password"></InputText>
					<label class="form-label">Password</label>
				</div>
				<br />
				<div>
					<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
				</div>
				<br />
				<div>
					<p>
						<a class="btn btn-success" @onclick="GoToRegister">Register as a new user</a>
					</p>
				</div>
				<p>@Message</p>
			</EditForm>
		</section>
	</div>
</div>


@code {
	protected UserLoginRequest User = new();
	protected string Message = string.Empty;

	protected async Task HandleValidRequest()
	{
		var result = await AuthService.Login(User);

		if (result.Success)
		{
			await Js.InvokeVoidAsync("localStorage.setItem", "token", result.Token);
			//NavManager.NavigateTo("/");
		}
		else
			Message = string.Join(",", result.Errors);
	}


	protected void GoToRegister()
	{
		NavManager.NavigateTo("/Register");
	}
}
