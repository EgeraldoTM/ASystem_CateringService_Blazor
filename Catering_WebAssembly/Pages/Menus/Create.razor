@page "/menu/create"
@using CateringApi.Helpers.Common.DTOs;
@using CateringApi.Helpers.Common.Requests;
@using Catering_WebAssembly.Services;
@inject IMenuService MenuService
@inject IFoodItemService ItemService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>New Menu</PageTitle>

<h2>New Menu</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<EditForm Model="Menu" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="@HandleFailedRequest">
			<div class="form-group">
				<label>Date</label>
				<InputDate class="form-control" @bind-Value="@Menu.Date"></InputDate>
			</div>
			<br />
			<div class="form-group">
				<label>Food Name</label>
				<select @ref="_selectReference" @onchange="OnSelectionChanged" multiple>
					@foreach (var item in FoodItems)
					{
						<option value="@item.Id" selected="@foodIds.Contains(item.Id)">@item.Name</option>
					}
				</select>
			</div>
			<br />
			<ul id="foodItems" class="list-group"></ul>
			<br />
			<button class="btn btn-success">Submit</button> | <a class="btn btn-primary">Back</a>
		</EditForm>
	</div>
</div>

@code {

	protected string Message = string.Empty;

	protected MenuRequest Menu = new();
	protected List<FoodItemDto> FoodItems = new();
	protected List<int> foodIds = new();
	private ElementReference _selectReference;

	protected override async Task OnInitializedAsync()
	{
		var items = await ItemService.GetAll();

		FoodItems = items.ToList();
	}

	protected async Task HandleValidRequest()
	{
		Menu.FoodIds = foodIds;

		var result = await MenuService.Create(Menu);

		if (result is not null)
			NavigationManager.NavigateTo("/menu");
		else
			Message = "Something unexpected happened, Menu could not be created.";
	}

	protected async Task HandleFailedRequest()
	{

	}

	private async Task OnSelectionChanged(ChangeEventArgs eventArgs)
	{
		var selectionList = new List<int>();
		var selection = await GetSelections(_selectReference);
		foreach (var id in selection)
		{
			int convertedId = int.Parse(id);
			selectionList.Add(convertedId);
		}
		foodIds = selectionList;
	}

	public async Task<HashSet<string>> GetSelections(ElementReference elementReference)
	{
		return (await JS.InvokeAsync<List<string>>("getSelectedValues", _selectReference)).ToHashSet();
	}
}
